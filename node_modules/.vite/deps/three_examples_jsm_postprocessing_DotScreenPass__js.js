import {
  FullScreenQuad,
  Pass
} from "./chunk-P5JA6KZ5.js";
import {
  ShaderMaterial,
  UniformsUtils,
  Vector2
} from "./chunk-TDYYZF5M.js";

// node_modules/three/examples/jsm/shaders/DotScreenShader.js
var DotScreenShader = {
  name: "DotScreenShader",
  uniforms: {
    "tDiffuse": { value: null },
    "tSize": { value: new Vector2(256, 256) },
    "center": { value: new Vector2(0.5, 0.5) },
    "angle": { value: 1.57 },
    "scale": { value: 1 }
  },
  vertexShader: (
    /* glsl */
    `

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`
  ),
  fragmentShader: (
    /* glsl */
    `

		uniform vec2 center;
		uniform float angle;
		uniform float scale;
		uniform vec2 tSize;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		float pattern() {

			float s = sin( angle ), c = cos( angle );

			vec2 tex = vUv * tSize - center;
			vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;

			return ( sin( point.x ) * sin( point.y ) ) * 4.0;

		}

		void main() {

			vec4 color = texture2D( tDiffuse, vUv );

			float average = ( color.r + color.g + color.b ) / 3.0;

			gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );

		}`
  )
};

// node_modules/three/examples/jsm/postprocessing/DotScreenPass.js
var DotScreenPass = class extends Pass {
  /**
   * Constructs a new dot screen pass.
   *
   * @param {Vector2} center - The center point.
   * @param {number} angle - The rotation of the effect in radians.
   * @param {number} scale - The scale of the effect. A higher value means smaller dots.
   */
  constructor(center, angle, scale) {
    super();
    this.uniforms = UniformsUtils.clone(DotScreenShader.uniforms);
    if (center !== void 0) this.uniforms["center"].value.copy(center);
    if (angle !== void 0) this.uniforms["angle"].value = angle;
    if (scale !== void 0) this.uniforms["scale"].value = scale;
    this.material = new ShaderMaterial({
      name: DotScreenShader.name,
      uniforms: this.uniforms,
      vertexShader: DotScreenShader.vertexShader,
      fragmentShader: DotScreenShader.fragmentShader
    });
    this._fsQuad = new FullScreenQuad(this.material);
  }
  /**
   * Performs the dot screen pass.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering
   * destination for the pass.
   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the
   * previous pass from this buffer.
   * @param {number} deltaTime - The delta time in seconds.
   * @param {boolean} maskActive - Whether masking is active or not.
   */
  render(renderer, writeBuffer, readBuffer) {
    this.uniforms["tDiffuse"].value = readBuffer.texture;
    this.uniforms["tSize"].value.set(readBuffer.width, readBuffer.height);
    if (this.renderToScreen) {
      renderer.setRenderTarget(null);
      this._fsQuad.render(renderer);
    } else {
      renderer.setRenderTarget(writeBuffer);
      if (this.clear) renderer.clear();
      this._fsQuad.render(renderer);
    }
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever the pass is no longer used in your app.
   */
  dispose() {
    this.material.dispose();
    this._fsQuad.dispose();
  }
};
export {
  DotScreenPass
};
//# sourceMappingURL=three_examples_jsm_postprocessing_DotScreenPass__js.js.map
